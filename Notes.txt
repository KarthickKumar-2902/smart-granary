import { useState } from 'react';
import Bargraph from '../components/Bargraph';

const Home = () => {
  const [selectedRange, setSelectedRange] = useState('this-week');
  const [chartType, setChartType] = useState('Bar'); // Default to Bar chart

  const handleRangeChange = (e) => {
    setSelectedRange(e.target.value);
  };

  const handleChartTypeChange = (e) => {
    setChartType(e.target.value);
  };

  return (
    <>
      <div className="container h-dheight mt-10 mx-auto p-4 max-w-4xl">
        {/* Date Range Selector */}
        <div className="select-date flex items-center mb-9">
          <label htmlFor="date-select" className="text-lg font-semibold mr-4">
            Select Date Range:
          </label>
          <select
            name="date-select"
            id="date-select"
            onChange={handleRangeChange}
            value={selectedRange}
            className="block w-full sm:w-48 p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-transparent"
          >
            <option value="this-week">This Week</option>
            <option value="past-week">Past Week</option>
          </select>
        </div>

        {/* Chart Type Selector */}
        <div className="select-chart-type flex items-center mb-9">
          <label htmlFor="chart-type-select" className="text-lg font-semibold mr-4">
            Select Chart Type:
          </label>
          <select
            name="chart-type-select"
            id="chart-type-select"
            onChange={handleChartTypeChange}
            value={chartType}
            className="block w-full sm:w-48 p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-transparent"
          >
            <option value="Bar">Bar</option>
            <option value="Line">Line</option>
            <option value="Pie">Pie</option>
            <option value="Doughnut">Doughnut</option>
          </select>
        </div>

        {/* Render the Bargraph component */}
        <Bargraph selectedRange={selectedRange} chartType={chartType} />
      </div>
    </>
  );
};

export default Home;







import PropTypes from 'prop-types';
import { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarController,
  LineController,
  PieController,
  DoughnutController,
  BarElement,
  LineElement,
  PointElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  Title,
  Tooltip,
  Legend,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  BarController,
  LineController,
  PieController,
  DoughnutController
);

const Bargraph = ({ selectedRange, selectedDate, chartType }) => {
  
  // Datasets for temperature, gas, and humidity
  const datasets = {
    temperature: {
      label: 'Temperature (째C)',
      backgroundColor: 'rgba(75, 192, 192, 0.6)',
      borderColor: 'rgba(75, 192, 192, 1)',
      borderWidth: 1,
      data: {
        'this-week': [18, 22, 17, 19, 20, 21, 25],
        'past-week': [22, 25, 20, 21, 19, 23, 24],
        '2024-09-25': [20, 21, 22, 23, 24, 25, 26],
        '2024-09-26': [18, 19, 20, 21, 22, 23, 24],
      },
    },
    gas: {
      label: 'Gas (ppm)',
      backgroundColor: 'rgba(0, 0, 0, 0.43)',
      borderColor: 'rgba(75, 192, 192, 1)',
      borderWidth: 1,
      data: {
        'this-week': [30, 35, 33, 31, 30, 29, 28],
        'past-week': [32, 34, 31, 33, 35, 36, 30],
        '2024-09-25': [29, 28, 27, 26, 25, 24, 23],
        '2024-09-26': [27, 26, 25, 24, 23, 22, 21],
      },
    },
    humidity: {
      label: 'Humidity (%)',
      backgroundColor: 'rgba(0, 0, 253, 0.8)',
      borderColor: 'rgba(75, 192, 192, 1)',
      borderWidth: 1,
      data: {
        'this-week': [70, 68, 65, 69, 72, 75, 71],
        'past-week': [60, 65, 64, 63, 68, 70, 66],
        '2024-09-25': [67, 66, 65, 64, 63, 62, 61],
        '2024-09-26': [68, 67, 66, 65, 64, 63, 62],
      },
    },
  };

  const chartData = (datasetKey) => ({
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    datasets: [
      {
        ...datasets[datasetKey],
        data: selectedDate
          ? datasets[datasetKey].data[selectedDate]
          : datasets[datasetKey].data[selectedRange] || [],
      },
    ],
  });

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: function (value) {
            if (this.chart.data.datasets[0].label.includes('Temperature')) {
              return `${value}째C`;
            } else if (this.chart.data.datasets[0].label.includes('Gas')) {
              return `${value} ppm`;
            } else if (this.chart.data.datasets[0].label.includes('Humidity')) {
              return `${value}%`;
            }
            return value;
          },
        },
      },
    },
    plugins: {
      tooltip: {
        callbacks: {
          label: function (context) {
            const label = context.dataset.label || '';
            let value = context.raw;
            if (label.includes('Temperature')) {
              value += '째C';
            } else if (label.includes('Gas')) {
              value += ' ppm';
            } else if (label.includes('Humidity')) {
              value += '%';
            }
            return `${label}: ${value}`;
          },
        },
      },
    },
  };

  // Chart components map for dynamic rendering
  const chartComponents = {
    Bar: Bar,
    Line: Line,
    Pie: Pie,
    Doughnut: Doughnut,
  };

  const ChartComponent = chartComponents[chartType];

  return (
    <div className="container mx-auto">
      {/* Temperature Graph */}
      <div className="chart-section w-full sm:w-4/5 md:w-3/4 lg:w-1/2 mt-10" style={{ height: '300px' }}>
        <h2 className="text-center font-semibold">Temperature (째C)</h2>
        <ChartComponent data={chartData('temperature')} options={options} />
      </div>

      {/* Gas Graph */}
      <div className="chart-section w-full sm:w-4/5 md:w-3/4 lg:w-1/2 mt-10" style={{ height: '300px' }}>
        <h2 className="text-center font-semibold">Gas (ppm)</h2>
        <ChartComponent data={chartData('gas')} options={options} />
      </div>

      {/* Humidity Graph */}
      <div className="chart-section w-full sm:w-4/5 md:w-3/4 lg:w-1/2 mt-10" style={{ height: '300px' }}>
        <h2 className="text-center font-semibold">Humidity (%)</h2>
        <ChartComponent data={chartData('humidity')} options={options} />
      </div>
    </div>
  );
};

Bargraph.propTypes = {
  selectedRange: PropTypes.string,
  selectedDate: PropTypes.string,
  chartType: PropTypes.string.isRequired, // Add prop for chartType
};

export default Bargraph;

